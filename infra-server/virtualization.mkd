Notes on virtualization
=======================

The major issue that has so far impeded the widespread adoption of full virtualization solutions is the high resource overhead incurred from simultaneously running many operating system instances (memory penalty) and trapping critical instructions to provide proper isolation between different system domains on x86 hardware that dominated the general-purpose computer market (processor cycles penalty).

Several lightweight virtualization systems have been developed to address these problems (OpenVZ and LXC for Linux, FreeBSD jails, Solaris Zones, etc.), although significant performance improvements came at the price of reduced flexibility. Most notably, it is not possible to use such containers with operating system kernels that were not specifically designed to run in virtualized mode, for example, we cannot run Microsoft Windows inside an OpenVZ domain. Even while staying within the same class of operating systems, it is problematic to run newer Linux distributions as guests on top of an older stable OpenVZ host kernel, as newer application software may well be dependent upon APIs unsupported in older kernels.

In recent years, however, by making use of x86 hardware-assisted virtualization extensions (Intel VT-x or AMD-V) and optional paravirtualized guest operating system drivers when possible, the performance of virtualized guests has been improved to closely match native performance on bare metal hardware. Moreover, new technologies have emerged to deal with the excessive memory consumption. In our case it was absolutely essential to have the option to create build machines running the latest versions of a wide spectrum of supported operating systems (including Linux, Mac OS X and Windows) and therefore, in spite of remaining minor performance penalties, we opted to implement full virtualization through KVM.

As discussed above, allocating large amounts of memory in order to keep many identical builders running in virtualization context can quickly exhaust available host system resources. We were able to safely oversubscribe memory to the guest systems in order to improve virtualization density with the help of kernel same-page merging [(KSM)][cs-arcangeli2009]. This recently introduced technique allows KVM guests to share identical memory pages that are discovered by the KSM daemon while the system is running [*][cs-chang2011]. In our setting with six guests, five of which were highly similar, the use of KSM resulted in savings of more than 12 GB worth of memory by sharing over 2 GB of common memory pages among guests.

[cs-arcangeli2009]: https://www.kernel.org/doc/ols/2009/ols2009-pages-19-28.pdf "Arcangeli, A.; Eidus, I. & Wright, C. (2009), Increasing memory density by using KSM, in 'Proceedings of the Linux Symposium', pp. 19--28."
[cs-chang2011]: http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5951913 "Chang, C.-R.; Wu, J.-J. & Liu, P. (2011), An Empirical Study on Memory Sharing of Virtual Machines for Server Consolidation, in 'Proc. IEEE 9th Int Parallel and Distributed Processing with Applications (ISPA) Symp', pp. 244--249."
